import { HttpClient } from '@angular/common/http';
import { Component, OnInit } from '@angular/core';
import { ActivatedRoute } from '@angular/router';
import { environment } from '@env/environment';
import { io } from "socket.io-client";
@Component({
  selector: 'app-food-list',
  templateUrl: './food-list.component.html',
  styleUrl: './food-list.component.css'
})
export class FoodListComponent implements OnInit {
  orderId: string | null = null;
  socket: any;
  userId: string | null = null;
  categories: any[] = [];
  menus: any[] = [];
  storeId: string | null = null;
  tableId: string | null = null;
  table: any;
  selectedMenu: any = null;
  openTime: any;
  closeTime: any;
  serverTime: any;


  constructor(private http: HttpClient, private route: ActivatedRoute) { this.loadCart(); this.socket = io("http://localhost:3000"); }
  ngOnInit(): void {
    this.getServerTime()

    this.fetchMenus();
    this.orderId = localStorage.getItem("orderId");
    if (this.orderId) {
      this.socket.emit("registerOrder", this.orderId);
    }

    this.socket.on("orderCancelled", (data: any) => {
      if (data.orderId === this.orderId) {
        localStorage.removeItem("cart");
        localStorage.removeItem("orderId");
        alert("‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ñ‡∏π‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÅ‡∏•‡πâ‡∏ß");
      }
    });
    this.getPopularMenus()
  }

  getServerTime() {

    this.http.get<{ serverTime: string }>(`${environment.apiBaseUrl}/server-time`)
      .subscribe({
        next: (response) => {
          this.serverTime = new Date(response.serverTime);
          console.log("‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏Ç‡∏≠‡∏á‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå:", this.serverTime);
          const store_id = localStorage.getItem("storeId");
          this.http.get(`${environment.apiBaseUrl}/api/stores/time/${store_id}`)
            .subscribe({
              next: (response: any) => {
                console.log("response", response);
                this.openTime = response.open_time;
                this.closeTime = response.close_time;
                console.log("‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏õ‡∏¥‡∏î-‡∏õ‡∏¥‡∏î:", this.openTime, this.closeTime);
                this.caltime();
              },
              error: (error) => {
                console.error("‚ùå ERROR:", error);
              }
            });
        },
        error: (error) => {
          console.error("‚ùå ERROR:", error);
        }
      });



  }

  caltime() {
    console.log("‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô:", this.serverTime);
    const currentTime = this.serverTime.getHours() * 60 + this.serverTime.getMinutes(); // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ô‡∏≤‡∏ó‡∏µ

    const [openHour, openMinute] = this.openTime.split(":").map(Number);
    const [closeHour, closeMinute] = this.closeTime.split(":").map(Number);

    const openTime = openHour * 60 + openMinute;  // ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏õ‡πá‡∏ô‡∏ô‡∏≤‡∏ó‡∏µ
    const closeTime = closeHour * 60 + closeMinute; // ‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏¥‡∏î‡πÄ‡∏õ‡πá‡∏ô‡∏ô‡∏≤‡∏ó‡∏µ

    if (currentTime < openTime && currentTime > closeTime) {
      alert("‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡∏£‡πâ‡∏≤‡∏ô‡∏õ‡∏¥‡∏î‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏õ‡∏¥‡∏î‡∏£‡πâ‡∏≤‡∏ô");
      return;
    }
  }

  // loadTime() {

  //   const store_id = localStorage.getItem("storeId");
  //   this.http.get(`${environment.apiBaseUrl}/api/stores/time/${store_id}`)
  //     .subscribe({
  //       next: (response: any) => {
  //         console.log("response", response);
  //         this.openTime = response.open_time;
  //         this.closeTime = response.close_time;
  //         console.log("‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏õ‡∏¥‡∏î-‡∏õ‡∏¥‡∏î:", this.openTime, this.closeTime);
  //       },
  //       error: (error) => {
  //         console.error("‚ùå ERROR:", error);
  //       }
  //     });

  // }
  fetchMenus(): void {
    // Retrieve the userId from localStorage
    this.userId = localStorage.getItem('storeId');
    // Fetch categories
    this.http.get<any[]>(`${environment.apiBaseUrl}/api/categories/` + this.userId).subscribe(
      (data) => {
        this.categories = data;
        console.log(this.categories)
      },
      (error) => {
        console.error('Error loading categories:', error);
      }
    );

    this.http.get<any[]>(`${environment.apiBaseUrl}/api/menus/` + this.userId).subscribe(
      (data) => {
        // Map over the fetched menus and update imageUrl dynamically
        console.log("data", data)
        this.menus = data.map(menu => ({
          ...menu,  // Copy the properties of the menu
          imageUrl: `${environment.apiBaseUrl}/uploads/${menu.item_image}`  // Prepend the server URL to imageUrl
        }));
        console.log("food", this.menus)
      },
      (error) => {
        console.error('Error loading menu items:', error);
      }

    );
    this.http.get<any[]>(`${environment.apiBaseUrl}/api/tables/` + this.userId).subscribe({
      next: (data) => {
        console.log('Fetched tables data:', data); // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏à‡∏≤‡∏Å API

        // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ß‡πà‡∏≤ table_id ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        const foundTable = data.find(table => table.table_id == this.tableId);

        if (foundTable) {
          console.log('Table ID matches:', this.tableId);

          // ‡πÉ‡∏™‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏ï‡πä‡∏∞‡∏ó‡∏µ‡πà‡πÄ‡∏à‡∏≠ ‡∏•‡∏á‡πÉ‡∏ô this.table
          this.table = foundTable;

        } else {
          console.warn('Table ID not found:', this.tableId);
        }

        console.log('Updated Table:', this.table);
      },
      error: (error) => {
        console.error('Error fetching tables:', error);
      }
    });
  }
  quantity: number = 1; // ‡∏Ñ‡πà‡∏≤‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏õ‡πá‡∏ô 1
  openModal(menu: any): void {
    this.selectedMenu = menu;
    this.quantity = 1;
  }

  // Close the modal
  closeModal(): void {
    this.selectedMenu = null;
  }
  increaseQuantity(): void {
    this.quantity++;
  }

  // ‡∏•‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô (‡πÑ‡∏°‡πà‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤ 1)
  decreaseQuantity(): void {
    if (this.quantity > 1) {
      this.quantity--;
    }
  }

  validateQuantity(): void {
    if (this.quantity < 1 || isNaN(this.quantity)) {
      this.quantity = 1;
    }
  }


  cart: any[] = [];
  additionalNote: string = "";
  addToCart(): void {
    if (this.selectedMenu) {
      // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏≤‡∏Ñ‡∏≤‡∏´‡∏•‡∏±‡∏á‡∏´‡∏±‡∏Å‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î
      const finalPrice = this.getDiscountedPrice(this.selectedMenu.price, this.selectedMenu.discount);

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ã‡πâ‡∏≥ ‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏‡πÄ‡∏î‡∏¥‡∏°‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      const existingItem = this.cart.find(item =>
        item.item_id === this.selectedMenu.item_id && item.note === this.additionalNote
      );

      if (existingItem) {
        // ‡∏ñ‡πâ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ã‡πâ‡∏≥ ‡πÅ‡∏•‡∏∞‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏‡πÄ‡∏î‡∏¥‡∏° ‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏ó‡∏ô
        existingItem.quantity += this.quantity;
      } else {
        // ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ ‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà
        this.cart.push({
          item_id: this.selectedMenu.item_id,
          item_name: this.selectedMenu.item_name,
          price: finalPrice, // ‡πÉ‡∏ä‡πâ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏´‡∏•‡∏±‡∏á‡∏´‡∏±‡∏Å‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î
          quantity: this.quantity,
          imageUrl: this.selectedMenu.imageUrl,
          note: this.additionalNote, // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏‡∏ó‡∏µ‡πà‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏£‡∏∞‡∏ö‡∏∏
        });
      }

      this.saveCart(); // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á localStorage
      console.log("‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤:", this.cart);
      alert(`‡πÄ‡∏û‡∏¥‡πà‡∏° ${this.selectedMenu.item_name} ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô ${this.quantity} ‡∏ä‡∏¥‡πâ‡∏ô ‡∏•‡∏á‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡πÅ‡∏•‡πâ‡∏ß!`);

      // ‚úÖ ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Ñ‡πà‡∏≤
      this.closeModal();
      this.selectedMenu = null;
      this.additionalNote = ""; // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏á‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤
    }
  }

  // ‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏à‡∏≤‡∏Å‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤
  removeFromCart(index: number): void {
    this.cart.splice(index, 1);
    this.saveCart(); // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï localStorage
  }

  // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏•‡∏á localStorage
  saveCart(): void {
    localStorage.setItem("cart", JSON.stringify(this.cart));
  }

  // ‡πÇ‡∏´‡∏•‡∏î‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏à‡∏≤‡∏Å localStorage
  loadCart(): void {
    const savedCart = localStorage.getItem("cart");
    if (savedCart) {
      this.cart = JSON.parse(savedCart);
    }
  }

  recommendedMenusExist(): boolean {
    return this.menus?.some(menu => menu.is_recommended === 1);
  }
  getDiscountedPrice(price: number, discount: number): number {
    return price - discount;
  }

  topMenus: any;

  getPopularMenus(): void {
    const storeId = localStorage.getItem("storeId");
    console.log(storeId)
    this.http.get(`${environment.apiBaseUrl}/api/menus/top-menu/${storeId}`).subscribe({
      next: (response: any) => {
        this.topMenus = response;
        console.log("üî• ‡πÄ‡∏°‡∏ô‡∏π‡∏¢‡∏≠‡∏î‡∏ô‡∏¥‡∏¢‡∏° (‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á):", this.topMenus);
      },
      error: (error) => {
        console.error("‚ùå ERROR:", error);
      }
    });
  }

  isBestSeller(menuId: number): boolean {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ topMenus ‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (!this.topMenus) return false;

    return this.topMenus.some((menu: any) => menu.item_id === menuId);
  }




}
