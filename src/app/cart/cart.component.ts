import { Component, OnInit } from '@angular/core';
import { Router } from '@angular/router';
import { environment } from '@env/environment';
import { HttpClient } from '@angular/common/http';


@Component({
  selector: 'app-cart',
  templateUrl: './cart.component.html',
  styleUrls: ['./cart.component.css']
})
export class CartComponent implements OnInit {
  constructor(private router: Router, private http: HttpClient) { }
  cart: any[] = []; // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤
  openTime: any;
  closeTime: any;
  serverTime: any;

  ngOnInit(): void {
    this.loadCart(); // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤
    this.loadTime();
    this.getServerTime();
  }


  // ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏à‡∏≤‡∏Å LocalStorage
  loadCart(): void {
    const savedCart = localStorage.getItem("cart");
    if (savedCart) {
      this.cart = JSON.parse(savedCart);
    }
  }

  getServerTime(): void {
    this.http.get<{ serverTime: string }>(`${environment.apiBaseUrl}/server-time`)
      .subscribe(response => {
        this.serverTime = new Date(response.serverTime);
        console.log("‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏Ç‡∏≠‡∏á‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå:", this.serverTime);
      });
  }
  loadTime(): void {
    const store_id = localStorage.getItem("storeId");
    this.http.get(`${environment.apiBaseUrl}/api/stores/time/${store_id}`).subscribe({
      next: (response: any) => {
        console.log("response", response);
        this.openTime = response.open_time;
        this.closeTime = response.close_time;
        console.log("‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏õ‡∏¥‡∏î-‡∏õ‡∏¥‡∏î:", this.openTime, this.closeTime);
      },
      error: (error) => {
        console.error("ERROR:", error);
      }
    });
  }

  // ‚úÖ ‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤
  removeFromCart(index: number): void {
    this.cart.splice(index, 1);
    this.saveCart();
  }

  // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
  updateQuantity(index: number, newQuantity: number): void {
    if (newQuantity > 0) {
      this.cart[index].quantity = newQuantity;
    } else {
      if (confirm("Do you really want to remove this item?")) {
        this.removeFromCart(index);
      } else {
        this.cart[index].quantity = 1;
      }
    }
    this.saveCart();
  }

  // ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏•‡∏á LocalStorage
  saveCart(): void {
    localStorage.setItem("cart", JSON.stringify(this.cart));
  }

  ordering(): void {
    if (this.cart.length === 0) {
      alert("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤");
      return;
    }

    // ‚ùó‚ùó ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏∑‡πà‡∏ô ‡πÅ‡∏ó‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á API ‡πÉ‡∏´‡∏°‡πà
    const currentTime = this.serverTime.getHours() * 60 + this.serverTime.getMinutes(); // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ô‡∏≤‡∏ó‡∏µ

    const [openHour, openMinute] = this.openTime.split(":").map(Number);
    const [closeHour, closeMinute] = this.closeTime.split(":").map(Number);

    const openTime = openHour * 60 + openMinute;  // ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏õ‡πá‡∏ô‡∏ô‡∏≤‡∏ó‡∏µ
    const closeTime = closeHour * 60 + closeMinute; // ‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏¥‡∏î‡πÄ‡∏õ‡πá‡∏ô‡∏ô‡∏≤‡∏ó‡∏µ

    if (currentTime < openTime && currentTime > closeTime) {
      alert(`‚ùå ‡∏£‡πâ‡∏≤‡∏ô‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏´‡πâ‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ ${this.openTime} - ${this.closeTime} ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô`);
      return;
    }

    // ‚úÖ ‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡πá‡∏Ñ‡πÄ‡∏ß‡∏•‡∏≤ ‚Üí ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£
    const store_id = localStorage.getItem("storeId");
    const table_id = localStorage.getItem("tableId");
    let orderId = localStorage.getItem("orderId"); // ‚úÖ ‡∏î‡∏∂‡∏á orderId ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà

    if (!store_id || !table_id) {
      alert("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡πâ‡∏≤‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÇ‡∏ï‡πä‡∏∞‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á!");
      return;
    }

    const orderData: any = {
      store_id: store_id,
      table_id: table_id,
      items: this.cart,
      price: this.cart,
    };

    console.log("üì¶ ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠:", orderData);

    // ‚úÖ ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ orderId ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏î‡πâ‡∏ß‡∏¢ (‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÄ‡∏î‡∏¥‡∏°)
    if (orderId) {
      orderData.order_id = orderId;
    }

    this.http.post<{ message: string; orderId: number }>(`${environment.apiBaseUrl}/api/orders/`, orderData)
      .subscribe({
        next: (response) => {
          console.log("‚úÖ ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö:", response);

          // ‚úÖ ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÉ‡∏´‡∏°‡πà ‡πÉ‡∏´‡πâ‡πÄ‡∏Å‡πá‡∏ö orderId ‡∏•‡∏á localStorage    
          if (!orderId) {
            localStorage.setItem("orderId", response.orderId.toString());
          }

          alert(`‚úÖ ‡∏™‡∏±‡πà‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!\n ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå: ${response.orderId}`);

          // ‡∏•‡πâ‡∏≤‡∏á‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏á‡∏™‡∏±‡πà‡∏á‡πÄ‡∏™‡∏£‡πá‡∏à
          this.cart = [];
          localStorage.removeItem("cart");
        },
        error: (error) => {
          alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£");
          console.error("ERROR:", error);
        }
      });
  }





}

